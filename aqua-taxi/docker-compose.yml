version: "3.8"

services:
    mysql:
        image: mysql:8.0
        container_name: aqua-mysql
        restart: always
        environment:
            MYSQL_DATABASE: aqua
            MYSQL_USER: aqua
            MYSQL_PASSWORD: aqua
            MYSQL_ROOT_PASSWORD: root
            TZ: Europe/Kyiv
        ports:
            - "3306:3306"
        volumes:
            - mysql-data:/var/lib/mysql
        networks: [aqua]
        stop_grace_period: 60s
        healthcheck:
            test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD --silent"]
            interval: 5s
            timeout: 3s
            retries: 20
            start_period: 20s

    app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: aqua-app
        restart: always
        environment:
            APP_ENV: production
            APP_DEBUG: "false"
            TZ: Europe/Kyiv
        depends_on:
            mysql:
                condition: service_healthy
        networks: [aqua]
        working_dir: /var/www
        # ВАЖНО: app и nginx смотрят на ОДИН И ТОТ ЖЕ код
        volumes:
            - .:/var/www
            - ./storage:/var/www/storage
        command: >
            sh -lc "
              set -e;
              # 1) Права, чтобы не словить 500 на записи кэшей/логов
              chown -R www-data:www-data storage bootstrap/cache || true &&
              chmod -R ug+rwX        storage bootstrap/cache || true &&

              # 2) Если vendor отсутствует — ставим зависимости, но без фатала
              if [ ! -f vendor/autoload.php ]; then
                if command -v composer >/dev/null 2>&1; then
                  composer install --no-dev --optimize-autoloader --prefer-dist --no-interaction || true;
                else
                  echo '[warn] composer not found in image; vendor/ is missing' 1>&2;
                fi
              fi &&

              # 3) Безопасная регенерация кэшей
              php artisan optimize:clear || true &&
              php artisan config:cache  || true &&
              php artisan route:cache   || true &&
              php artisan view:cache    || true &&

              # 4) Миграции (не роняем контейнер при нулевой/повторной схеме)
              php artisan migrate --force --no-interaction || true &&

              # 5) Запуск PHP-FPM в форграунде
              php-fpm -F
            "
        # Простой healthcheck (контейнер жив и php доступен)
        healthcheck:
            test: ["CMD-SHELL", "php -r 'exit( (int)!function_exists(\"opcache_reset\") );'"]
            interval: 20s
            timeout: 5s
            retries: 5
            start_period: 20s

    nginx:
        image: nginx:alpine
        container_name: aqua-nginx
        restart: always
        depends_on:
            app:
                condition: service_started
            reverb:
                condition: service_started
        ports:
            - "80:80"
            - "443:443"
        volumes:
            # тот же код, что и у app
            - .:/var/www:ro
            - ./storage:/var/www/storage:ro
            # конфиги
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
            - ./docker/nginx/cors_map.conf:/etc/nginx/conf.d/cors_map.conf:ro
            # сертификаты: проверь, что в конфиге пути /certs/...
            - /etc/nginx/ssl:/certs:ro
        networks: [aqua]
        healthcheck:
            # busybox-wget есть в alpine-образе
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/ >/dev/null 2>&1 || exit 1"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s

    reverb:
        build:
            context: .
            dockerfile: docker/reverb/Dockerfile
        container_name: aqua-reverb
        restart: always
        environment:
            APP_ENV: production
            REVERB_APP_ID: aqua
            REVERB_APP_KEY: aqua_key
            REVERB_APP_SECRET: aqua_secret
            REVERB_PORT: 6001
            TZ: Europe/Kyiv
        expose:
            - "6001"
        depends_on:
            app:
                condition: service_started
        networks: [aqua]
        healthcheck:
            # простая проверка: порт слушается и отвечает HTTP-заголовком
            test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:6001/ >/dev/null 2>&1 || exit 1"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s

volumes:
    mysql-data:

networks:
    aqua:
        driver: bridge
