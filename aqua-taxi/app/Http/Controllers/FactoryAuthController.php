<?php

namespace App\Http\Controllers;

use App\Models\Factory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class FactoryAuthController extends Controller
{
    public function register(Request $request)
    {
        $request->validate([
            'email' => 'required|email|unique:factories,email',
            'phone' => 'required|string',
            'password' => 'required|string|min:6',
            'website' => 'required|string',
            'warehouse_address' => 'required|string',
            'water_types' => 'nullable|string',
            'certificate' => 'required|file|mimes:jpeg,png,jpg,pdf|max:10240', // –¥–æ–±–∞–≤–∏–ª pdf + —É–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç
        ]);

        // üì• –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        $certificatePath = $request->file('certificate')->store('certificates', 'public');

        // üåç –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Nominatim
        $geoResponse = Http::get('https://nominatim.openstreetmap.org/search', [
            'q' => $request->warehouse_address,
            'format' => 'json',
            'limit' => 1
        ]);

        $lat = null;
        $lng = null;

        if ($geoResponse->ok() && count($geoResponse->json()) > 0) {
            $lat = $geoResponse->json()[0]['lat'];
            $lng = $geoResponse->json()[0]['lon'];
        }

        // üè≠ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        $factory = Factory::create([
            'email' => $request->email,
            'phone' => $request->phone,
            'password' => Hash::make($request->password),
            'website' => $request->website,
            'warehouse_address' => $request->warehouse_address,
            'water_types' => $request->water_types,
            'certificate_path' => str_replace('public/', 'storage/', $certificatePath), // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª–µ certificate_file
            'certificate_status' => 'pending', // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            'certificate_expiration' => null,
            'is_verified' => false,
            'verified_until' => null,
            'lat' => $lat,
            'lng' => $lng,
        ]);

        return response()->json(['message' => '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞. –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.', 'factory' => $factory], 201);
    }


    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        $factory = Factory::where('email', $credentials['email'])->first();

        if (!$factory || !Hash::check($credentials['password'], $factory->password)) {
            return response()->json(['message' => '–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ'], 401);
        }

        $token = $factory->createToken('factory_token')->plainTextToken;

        return response()->json([
            'token' => $token,
            'factory' => $factory
        ]);
    }
    public function uploadCertificate(Request $request)
    {
        $factory = auth()->user(); // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è

        $request->validate([
            'certificate' => 'required|file|mimes:jpeg,png,pdf|max:10240', // 10 MB
        ]);

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        $path = $request->file('certificate')->store('public/certificates');

        // –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
        $factory->update([
            'certificate_file' => str_replace('public/', 'storage/', $path),
            'certificate_status' => 'pending',
            'certificate_expiration' => null,
        ]);

        return response()->json(['message' => '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.'], 200);
    }
}
